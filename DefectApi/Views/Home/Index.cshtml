@{
    ViewData["Title"] = "Dashboard";
}

<div class="container">
    <h2 class="text-header text-center">Dashboard</h2>
    <div class="filters">
        <div>
            <label for="timeFilter" class="form-label">Filter by Time Period</label>
            <select id="timeFilter" name="timePeriod" class="form-control">
                <option value="daily" selected>Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
            </select>
        </div>
    </div>
    <br />

    <div class="dashboard-container">
        <div class="summary-boxes">
            <div class="summary-box"><span>Today</span>
                <div id="dailyDefect">0</div>
            </div>
            <div class="summary-box"><span>Week</span>
                <div id="weeklyDefect">0</div>
            </div>
            <div class="summary-box"><span>Month</span>
                <div id="monthlyDefect">0</div>
            </div>
        </div>

        <div class="chart-container">
            <canvas id="chart"></canvas>
        </div>

        <div id="defectBreakdownCard" style="width: 100%; max-width: 800px; margin-top: 20px; display:none;">
            <div
                style="border: 1px solid #ccc; padding: 15px; border-radius: 8px; box-shadow: 2px 2px 8px #ddd; background: white;">
                <h5><strong>📊 Breakdown</strong></h5>
                <div id="breakdownLineInfo" style="margin-bottom: 5px; font-weight: 500;"></div>
                <div id="breakdownPeriodInfo" style="margin-bottom: 10px; color: #666;"></div>

                <div id="breakdownSummary" style="margin-bottom: 10px;">🧮 Total: -</div>
                <ul id="breakdownList" style="list-style: none; padding: 0;">
                    <li>Select Bar...</li>
                </ul>
            </div>
        </div>


        <div class="top-stats-container" style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: center;">
            <div class="top-chart-box">
                <h6 class="text-center" id="topDefectsTitle">Top 3 Defects</h6>
                <canvas id="topDefectsChart"></canvas>
            </div>
            <div class="top-chart-box">
                <h6 class="text-center" id="topLinesTitle">Top 3 Line Productions</h6>
                <canvas id="topLinesChart"></canvas>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/jquery.js" asp-append-version="true"></script>
    <script src="~/js/chart.js" asp-append-version="true"></script>
    <script>
        $(function () {
            let chartInstance = null;

            function getRandomColor() {
                const letters = '0123456789ABCDEF';
                let color = '#';
                for (let i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }
            function showBreakdownCard(label, defectName, timePeriod, lineProductionName = "") {
                const $card = $("#defectBreakdownCard");
                const $title = $("#breakdownTitle"); 
                const $summary = $("#breakdownSummary");
                const $list = $("#breakdownList");
                const $lineInfo = $("#breakdownLineInfo");
                const $periodInfo = $("#breakdownPeriodInfo");

                $card.show();
                $summary.text("Loading data...");
                $list.html("<li class='list-group-item'>Loading breakdown...</li>");
                $lineInfo.text("");
                $periodInfo.text("");

                $.get('/api/defect/chart-breakdown', {
                    timePeriod,
                    label,
                    lineProductionName
                })
                    .done(result => {
                        if (!Array.isArray(result)) {
                            console.error("Unexpected response format:", result);
                            $summary.text("❌ Invalid data format.");
                            $list.html(`<li class="list-group-item text-danger">Invalid data received from server.</li>`);
                            return;
                        }

                        if (result.length === 0) {
                            $summary.html(`🧮 Total: 0`);
                            $list.html(`<li class="list-group-item text-muted">No data found.</li>`);
                            return;
                        }

                        let totalCount = 0;
                        const items = result.map(d => {
                            totalCount += d.totalQty ?? 0;
                            return `
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>${d.defect ?? '-'}</span>
                                    <span>${d.totalQty ?? 0}</span>
                                </li>
                            `;
                        }).join('');

                        if (lineProductionName) {
                            $lineInfo.html(`<strong>${lineProductionName}</strong>`);
                        }
                        if (label) {
                            let periodText = "";
                            if (timePeriod === "daily") {
                                periodText = ` <strong>${label}</strong>`;
                            } else if (timePeriod === "weekly") {
                                periodText = `Week: <strong>${label}</strong>`;
                            } else if (timePeriod === "monthly") {
                                periodText = `Month: <strong>${label}</strong>`;
                            } else {
                                periodText = `Period: <strong>${label}</strong>`;
                            }
                            $periodInfo.html(periodText);
                        }

                        $summary.html(`🧮 Total: ${totalCount}`);
                        $list.html(items);
                    })
                    .fail(err => {
                        console.error("Error fetching breakdown:", err);
                        $summary.text("❌ Failed to load breakdown data.");
                        $list.html(`<li class="list-group-item text-danger">Error loading breakdown.</li>`);
                    });
            }


            function loadTopStats(timePeriod) {
                $.ajax({
                    url: '@Url.Action("GetTopDefectsAndLines", "Defect")',
                    type: 'GET',
                    data: { timePeriod: timePeriod },
                    success: function (response) {
                        const defectLabels = response.topDefects.map(d => d.name);
                        const defectData = response.topDefects.map(d => d.count);
                        const lineLabels = response.topLines.map(l => l.name);
                        const lineData = response.topLines.map(l => l.count);

                        let timeText = '';
                        switch (timePeriod) {
                            case 'daily':
                                timeText = ' (This Week)';
                                break;
                            case 'weekly':
                                timeText = ' (This Month)';
                                break;
                            case 'monthly':
                                timeText = ' (This Year)';
                                break;
                            default:
                                timeText = '';
                        }
                        $('#topDefectsTitle').text('Top 3 Defects' + timeText);
                        $('#topLinesTitle').text('Top 3 Line Productions' + timeText);

                        if (window.topDefectChartInstance) window.topDefectChartInstance.destroy();
                        if (window.topLineChartInstance) window.topLineChartInstance.destroy();

                        const defectCtx = document.getElementById("topDefectsChart").getContext("2d");
                        const lineCtx = document.getElementById("topLinesChart").getContext("2d");

                        window.topDefectChartInstance = new Chart(defectCtx, {
                            type: 'bar',
                            data: {
                                labels: defectLabels,
                                datasets: [{
                                    label: 'Defect Count',
                                    data: defectData,
                                    backgroundColor: defectLabels.map(() => getRandomColor())
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: { legend: { display: false } },
                                scales: {
                                    x: { display: false },
                                    y: { beginAtZero: true, ticks: { stepSize: 1 } }
                                }
                            }
                        });

                        window.topLineChartInstance = new Chart(lineCtx, {
                            type: 'bar',
                            data: {
                                labels: lineLabels,
                                datasets: [{
                                    label: 'Defect Total',
                                    data: lineData,
                                    backgroundColor: lineLabels.map(() => getRandomColor())
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: { legend: { display: false } },
                                scales: {
                                    x: { display: false },
                                    y: { beginAtZero: true, ticks: { stepSize: 1 } }
                                }
                            }
                        });
                    }
                });
            }


            function loadChart(timePeriod = 'daily') {
                $.ajax({
                    url: '@Url.Action("GetChartData", "Defect")',
                    type: 'GET',
                    data: { timePeriod },
                    success: function (response) {
                        const labels = response.labels || [];
                        const rawDatasets = response.datasets || [];
                        const summary = response.summary || {};

                        const formatNumber = (num) => num?.toLocaleString("en-US") ?? "0";

                        $("#dailyDefect").text(formatNumber(summary.today));
                        $("#weeklyDefect").text(formatNumber(summary.week));
                        $("#monthlyDefect").text(formatNumber(summary.month));

                        if (chartInstance) {
                            chartInstance.destroy();
                        }

                        const filteredDatasets = rawDatasets.map(set => {
                            const color = set.backgroundColor || getRandomColor();
                            return {
                                ...set,
                                backgroundColor: labels.map(() => color),
                            };
                        });

                        const ctx = document.getElementById("chart").getContext("2d");

                        chartInstance = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels,
                                datasets: filteredDatasets
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                interaction: {
                                    mode: 'nearest',
                                    axis: 'x',
                                    intersect: true
                                },
                                plugins: {
                                    tooltip: {
                                        mode: 'nearest',
                                        intersect: true,
                                        filter: (tooltipItem) => tooltipItem.raw !== 0
                                    },
                                    legend: {
                                        display: false
                                    }
                                },
                                scales: {
                                    x: { stacked: true },
                                    y: {
                                        stacked: true,
                                        beginAtZero: true,
                                        ticks: {
                                            callback: function (value) {
                                                return formatNumber(value);
                                            }
                                        }
                                    }
                                },
                                onClick: function (event, elements) {
                                    if (elements.length > 0) {
                                        const index = elements[0].index;
                                        const datasetIndex = elements[0].datasetIndex;
                                        const label = this.data.labels[index]?.trim();
                                        const lineProductionName = this.data.datasets[datasetIndex]?.label;
                                        const timePeriod = $("#timeFilter").val();

                                        showBreakdownCard(label, null, timePeriod, lineProductionName);
                                    }
                                }
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Chart Load Error:", status, error);
                    }
                });
            }

            loadChart();
            loadTopStats('daily');

            $("#timeFilter").change(function () {
                const selectedTimePeriod = $(this).val();
                loadChart(selectedTimePeriod);
                loadTopStats(selectedTimePeriod);
            });
        });
    </script>
}

<style>
    .dashboard-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        width: 100%;
        padding: 0 15px;
    }

    .chart-container {
        width: 100%;
        max-width: 800px;
        height: 400px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        box-sizing: border-box;
    }

    canvas#chart {
        width: 100% !important;
        height: auto !important;
    }

    .summary-boxes {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        width: 100%;
    }

    .summary-box {
        flex: 1 1 120px;
        min-width: 100px;
        max-width: 160px;
        height: 80px;
        background-color: #0F58A8;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        font-size: 18px;
        font-weight: bold;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .summary-box span {
        font-size: 14px;
    }

    .filters {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .filters select {
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ccc;
        min-width: 180px;
    }

    .top-stats-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        max-width: 800px;
        width: 100%;
        overflow: hidden;
        box-sizing: border-box;
    }

    .top-chart-box {
        background: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
        flex: 1 1 calc(50% - 20px);
        min-width: 250px;
        box-sizing: border-box;
        height: 300px;
    }
</style>
