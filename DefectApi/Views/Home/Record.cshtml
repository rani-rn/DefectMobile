@{
    ViewData["Title"] = "Record List";
}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container">
    <h2 class="text-header text-center justify-center">Record</h2>
    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-10">
            <div class="d-flex flex-wrap justify-content-between mb-3 gap-2">
                <div class="d-flex gap-2 flex-wrap">
                    <label for="startDate" class="form-label mb-0">Start</label>
                    <input type="date" id="startDate" class="form-control" />
                    <label for="endDate" class="form-label mb-0">Until</label>
                    <input type="date" id="endDate" class="form-control" />
                    <input type="text" id="searchInput" class="form-control" placeholder="Search...">
                </div>
                <button id="exportBtn" class="btn btn-success">
                    Export to Excel
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0 table-responsive rounded-3 overflow-hidden">
                    <thead class="table-light rounded-top-3">
                        <tr class="text-center">
                            <th>No</th>
                            <th>Date</th>
                            <th>Report by</th>
                            <th>Model</th>
                            <th>Section</th>
                            <th>Line Production</th>
                            <th>Line Production Qty</th>
                            <th>Defect</th>
                            <th>Description</th>
                            <th>Defect Qty</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var defect in Model)
                        {
                            <tr id="row-@defect.ReportId" class="text-center">
                                <td class="row-number"></td>
                                <td>@defect.ReportDate.ToString("yyyy-MM-dd")</td>
                                <td>@defect.Reporter</td>
                                <td>@defect.WpModel?.ModelName</td>
                                <td>@defect.Section?.SectionName</td>
                                <td>@defect.LineProduction?.LineProductionName</td>
                                <td>@defect.LineProdQty</td>
                                <td>@defect.Defect?.DefectName</td>
                                <td>@defect.Description</td>
                                <td>@defect.DefectQty</td>
                                <td>
                                    <a asp-controller="Home" asp-action="Update" asp-route-id="@defect.ReportId"
                                        class="btn btn-sm btn-warning">Edit</a>
                                    <button class="btn btn-sm btn-danger"
                                        onclick="confirmDelete(@defect.ReportId)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav>
                <ul id="pagination" class="pagination justify-content-center mt-3"></ul>
            </nav>

        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
    const rowsPerPage = 10;
    let currentPage = 1;
    let filteredRows = [];

    function showPage(page) {
        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        currentPage = page;

        filteredRows.forEach(row => row.style.display = "none");

        const startIndex = (page - 1) * rowsPerPage;
        const endIndex = startIndex + rowsPerPage;
        filteredRows.slice(startIndex, endIndex).forEach(row => row.style.display = "");

        updatePagination(totalPages);
        updateRowNumbers();
    }

    function updatePagination(totalPages) {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement("li");
            li.className = "page-item" + (i === currentPage ? " active" : "");
            const a = document.createElement("a");
            a.className = "page-link";
            a.href = "#";
            a.innerText = i;
            a.addEventListener("click", (e) => {
                e.preventDefault();
                showPage(i);
            });
            li.appendChild(a);
            pagination.appendChild(li);
        }
    }

    function updateRowNumbers() {
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = startIndex + rowsPerPage;
        const visibleRows = filteredRows.slice(startIndex, endIndex);

        visibleRows.forEach((row, index) => {
            const cell = row.querySelector(".row-number");
            if (cell) {
                cell.innerText = startIndex + index + 1;
            }
        });
    }
    function toDateOnly(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }


    function filterTable() {
        let startDateValue = document.getElementById("startDate").value;
        let endDateValue = document.getElementById("endDate").value;
        let searchInput = document.getElementById("searchInput").value.toLowerCase();
        let rows = Array.from(document.querySelectorAll("tbody tr"));

        let startDate = startDateValue ? toDateOnly(new Date(startDateValue)) : null;
        let endDate = endDateValue ? toDateOnly(new Date(endDateValue)) : null;

        filteredRows = rows.filter(row => {
            let dateText = row.cells[1].innerText.trim();
            let [year, month, day] = dateText.split("-");
            let rowDate = new Date(year, month - 1, day);
            rowDate = toDateOnly(rowDate);

            let matchesSearch = Array.from(row.cells).some(cell =>
                cell.innerText.toLowerCase().includes(searchInput)
            );

            let matchesDate = true;
            if (startDate && rowDate < startDate) matchesDate = false;
            if (endDate && rowDate > endDate) matchesDate = false;

            return matchesSearch && matchesDate;
        });

        rows.forEach(row => row.style.display = "none");
        filteredRows.forEach(row => row.style.display = "");

        showPage(1);
    }



    document.getElementById("startDate").addEventListener("change", filterTable);
    document.getElementById("endDate").addEventListener("change", filterTable);
    document.getElementById("searchInput").addEventListener("keyup", filterTable);

    filterTable();

    function confirmDelete(reportId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to delete this defect record?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/api/defect/delete/${reportId}`,
                    type: 'DELETE',
                    success: function (response) {
                        if (response.success) {
                            Swal.fire('Deleted!', response.message, 'success');
                            document.getElementById("row-" + reportId).remove();
                            filterTable();
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Error!', 'Failed to delete record.', 'error');
                    }
                });
            }
        });
    }

    document.getElementById("exportBtn").addEventListener("click", function () {
        let visibleRows = filteredRows;

        let data = [];

        let headers = [
            "No",
            "Date",
            "Report by",
            "Model",
            "Section",
            "Line Production",
            "Line Production Qty",
            "Defect",
            "Description",
            "Defect Qty"
        ];
        data.push(headers);

        visibleRows.forEach((row, index) => {
            let cells = Array.from(row.cells).slice(0, -1);
            let rowData = cells.map(cell => cell.innerText.trim());
            rowData[0] = index + 1;
            data.push(rowData);
        });

        let ws = XLSX.utils.aoa_to_sheet(data);
        let wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

        XLSX.writeFile(wb, "Filtered_DefectReport.xlsx");
    });


</script>
